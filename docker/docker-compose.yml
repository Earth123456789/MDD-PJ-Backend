version: '3.8'

networks:
  traefik:
    driver: bridge

volumes:
  postgres_data:
  redis_data:
  elasticsearch_data:
  rabbitmq_data:

services:
  # NestJS Application
  matching-service:
    build:
      context: ../services/matching
      dockerfile: Dockerfile
    container_name: matching-service
    restart: always
    ports:
      - "3002:3002" 
    depends_on:
      - postgres
      - redis
      - rabbitmq
      - elasticsearch
    env_file:
      - .env
    volumes:
      - ../services/matching:/app
      - /app/node_modules
    networks:
      - traefik
    labels:
      - "traefik.enable=true"
      - "traefik.docker.network=traefik"
      - "traefik.http.routers.matching.entrypoints=web"
      - "traefik.http.routers.matching.rule=Host(matching.localhost)"
      - "traefik.http.services.matching-service.loadbalancer.server.port=3000"
    command: >
      bash -c "
        sleep 15 &&
        npx prisma generate &&
        npx prisma migrate deploy &&
        npm run start:dev
      "

  # PostgreSQL Database
  postgres:
    image: postgres:latest
    container_name: postgres
    restart: always
    ports:
      - "5432:5432"
    environment:
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgres
      - POSTGRES_DB=matching
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - traefik
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.postgres.rule=Host(postgres.localhost)"
      - "traefik.http.services.postgres.loadbalancer.server.port=5432"

  # PgAdmin - PostgreSQL UI
  pgadmin:
    image: dpage/pgadmin4
    container_name: pgadmin
    restart: always
    ports:
      - "5050:80"
    environment:
      - PGADMIN_DEFAULT_EMAIL=admin@admin.com
      - PGADMIN_DEFAULT_PASSWORD=admin
    volumes:
      - ./pgadmin:/var/lib/pgadmin
    networks:
      - traefik
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.pgadmin.rule=Host(pgadmin.vehicle-matching.localhost)"
      - "traefik.http.services.pgadmin.loadbalancer.server.port=80"

  # Redis Cache
  redis:
    image: redis:7-alpine
    container_name: redis
    restart: always
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - traefik

  # Redis UI
  redis-commander:
    image: rediscommander/redis-commander:latest
    container_name: redis-commander
    restart: always
    ports:
      - "8081:8081"
    environment:
      - REDIS_HOSTS=local:redis:6379
    networks:
      - traefik
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.redis-commander.rule=Host(redis.vehicle-matching.localhost)"
      - "traefik.http.services.redis-commander.loadbalancer.server.port=8081"

  # RabbitMQ Queue System
  rabbitmq:
    image: rabbitmq:management
    container_name: rabbitmq
    restart: always
    ports:
      - "5672:5672"
      - "15672:15672"
    volumes:
      - rabbitmq_data:/var/lib/rabbitmq
    networks:
      - traefik
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.rabbitmq.rule=Host(rabbitmq.vehicle-matching.localhost)"
      - "traefik.http.services.rabbitmq.loadbalancer.server.port=15672"

  # Elasticsearch
  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:8.8.0
    container_name: elasticsearch
    restart: always
    ports:
      - "9200:9200"
    environment:
      - discovery.type=single-node
      - xpack.security.enabled=false
      - "ES_JAVA_OPTS=-Xms512m -Xmx512m"
    volumes:
      - elasticsearch_data:/usr/share/elasticsearch/data
    networks:
      - traefik

  # Kibana - Logging UI
  kibana:
    image: docker.elastic.co/kibana/kibana:8.8.0
    container_name: kibana
    restart: always
    ports:
      - "5601:5601"
    environment:
      - ELASTICSEARCH_HOSTS=http://elasticsearch:9200
    depends_on:
      - elasticsearch
    networks:
      - traefik
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.kibana.rule=Host(kibana.vehicle-matching.localhost)"
      - "traefik.http.services.kibana.loadbalancer.server.port=5601"

  # Traefik - Load Balancer
  traefik:
    image: traefik:latest
    container_name: traefik
    command:
      - "--api.insecure=true"
      - "--providers.docker=true"
      - "--entrypoints.web.address=:80"
      - "--log.level=DEBUG"
    ports:
      - "80:80"
      - "8080:8080"
    networks:
      - traefik
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.traefik.rule=Host(traefik.localhost)"
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock 