// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
  binaryTargets = ["native", "debian-openssl-3.0.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Driver {
  driver_id           Int     @id @default(autoincrement()) 
  name                String
  phone               String
  licenseNumber       String                @unique
  licenseType         String
  status              DriverStatus          @default(AVAILABLE)
  currentLatitude     Float?
  currentLongitude    Float?
  locationLastUpdated DateTime?
  preferredVehicleTypes String[]
  ratings             Float                 @default(0)
  experience          Int                   @default(0) // ปีประสบการณ์
  createdAt           DateTime              @default(now())
  updatedAt           DateTime              @updatedAt
  assignments         DriverVehicleAssignment[]

  @@map("drivers")
}

model Vehicle {
  vehicle_id          Int     @id @default(autoincrement()) 
  plateNumber         String                @unique
  type                String
  capacity            Float                 // น้ำหนักสูงสุดที่รับได้ (kg)
  length              Float                 // ความยาว (m)
  width               Float                 // ความกว้าง (m)
  height              Float                 // ความสูง (m)
  status              VehicleStatus         @default(AVAILABLE)
  fuelCapacity        Float
  currentFuel         Float
  features            String[]              // คุณสมบัติพิเศษ
  currentLatitude     Float?
  currentLongitude    Float?
  locationLastUpdated DateTime?
  createdAt           DateTime              @default(now())
  updatedAt           DateTime              @updatedAt
  assignments         DriverVehicleAssignment[]

  @@map("vehicles")
}

model DriverVehicleAssignment {
  assignment_id       Int     @id @default(autoincrement())
  driver              Driver  @relation(fields: [driverId], references: [driver_id], onDelete: Cascade)
  driverId            Int
  vehicle             Vehicle @relation(fields: [vehicleId], references: [vehicle_id], onDelete: Cascade)
  vehicleId           Int
  assignedAt          DateTime              @default(now())
  status              AssignmentStatus      @default(ACTIVE)
  createdAt           DateTime              @default(now())
  updatedAt           DateTime              @updatedAt

  @@index([driverId])
  @@index([vehicleId])

  @@map("driver_vehicle_assignments")
}

enum DriverStatus {
  AVAILABLE
  BUSY
  OFFLINE
}

enum VehicleStatus {
  AVAILABLE
  IN_USE
  MAINTENANCE
}

enum AssignmentStatus {
  ACTIVE
  COMPLETED
  CANCELLED
}
