generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "debian-openssl-3.0.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Order {
  order_id     Int      @id @default(autoincrement())  
  customer_id  Int  
  order_date   DateTime @default(now())
  total_amount Float
  status       OrderStatus @default(PENDING)   

  order_items  OrderItem[] // The relation to OrderItem will exist here
  tracking     Tracking?

  // Optional: You could fetch customer info from the Customer service if needed
  // customer     Customer @relation(fields: [customer_id], references: [id]) 
}

model OrderItem {
  order_item_id  Int      @id @default(autoincrement())  
  order_id       Int
  product_id     Int      // Referencing the ProductService here
  quantity       Int
  price_per_unit Float

  order         Order   @relation(fields: [order_id], references: [order_id], onDelete: Cascade)
  // product       Product @relation(fields: [product_id], references: [product_id], onDelete: Cascade)
}

model Tracking {
  tracking_id     Int      @id @default(autoincrement())  
  order_id        Int      @unique
  latitude        Float
  longitude       Float
  tracking_status TrackingStatus @default(IN_TRANSIT)
  last_update     DateTime @updatedAt

  order         Order   @relation(fields: [order_id], references: [order_id])
}

enum TrackingStatus {
  IN_TRANSIT
  DELIVERED
  CANCELLED
}

enum OrderStatus {
  PENDING
  SHIPPED
  COMPLETED
  CANCELLED
}
